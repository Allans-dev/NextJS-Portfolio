import type {
  NextPage,
  GetServerSideProps,
  InferGetServerSidePropsType,
} from "next";
import Head from "next/head";

import { useEffect } from "react";

import Header from "../Components/Header";
import Footer from "../Components/Footer";

import Portfolio from "../Components/Portfolio";

import CarouselHorizontal from "../Components/CarouselHorizontal";

import styles from "../styles/Home.module.css";

const Home: NextPage = ({
  news,
}: InferGetServerSidePropsType<typeof getServerSideProps>) => {
  useEffect(() => {
    document.addEventListener("DOMContentLoaded", function () {
      //dom is fully loaded, but maybe waiting on images & css files
      if (window) {
        window.$ = window.jQuery = require("jquery");
      }
    });
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main className={styles.main}>
        <article>
          <section className={styles.section_carousel}>
            <CarouselHorizontal data={news} row={1} />
            <CarouselHorizontal data={news} row={2} />
            <CarouselHorizontal data={news} row={3} />
          </section>
          <h1 className={styles.title}>Finding Solutions within Code</h1>
        </article>
        <Portfolio />
      </main>
      <Footer />
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async () => {
  const options = {
    method: "GET",
    headers: {
      "X-Api-Key": `${process.env.NEWSAPI_KEY}`,
    },
  };

  try {
    const res = await fetch(
      "https://newsapi.org/v2/everything?q=software+code&sortBy=popularity&pageSize=30&excludeDomains=lifehacker.com&page=1",
      options
    );
    const data = await res.json();

    let news: object[] = [];

    data.articles.map((item: any) => {
      let newsObj: any = new Object({
        title: item.title,
        url: item.url,
        imageUrl: item.urlToImage,
      });
      news.push(newsObj);
    });

    if (!data) {
      return {
        notFound: true,
      };
    }

    return {
      props: {
        news,
      },
    };
  } catch {
    throw new Error("API error");
  }
};

export default Home;
